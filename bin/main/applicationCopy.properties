

### properties 설정은 아래 링크 참조 
###
### https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

#spring.profiles.active=dev


##Developer configs
debug=true


##web server configs
server.servlet.context-path=/
server.port=9090
## css, html 등 압축해서 전송할 때 이득이 되는 포맷들은 자동적으로 압축
server.compression.enabled=true
server.compression.min-response-size=2048
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

##Jackson pretty config 
#spring.jackson.serialization.indent-output=true

##Logging 
logging.config=classpath:logback/logback-base.xml
logging.level.org.springframework.web=DEBUG
spring.http.log-request-details=true
logging.level.web=DEBUG

##I set logback to an XML file. The settings below are commented out
#logging.level.root=DEBUG
#logging.level.org.springframework=INFO
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate=ERROR
#logging.level.org.hibernate.validator.internal.util.Version.level=WARNING
##hibernate 쿼리에 바인딩 되는 값을 로그에 보여줌. 
logging.level.org.hibernate.type.descriptor.sql=trace
#logging.level.org.apache.coyote.http11.Http11NioProtocol.level=WARNING
#logging.level.org.apache.tomcat.util.net.NioSelectorPool.level=WARNING
#logging.level.logging.levelorg.apache.catalina.startup.DigesterFactory.level=SEVERE
#logging.level.org.apache.catalina.util.LifecycleBase.level=SEVERE
#logging.level.org.eclipse.jetty.util.component.AbstractLifeCycle.level=SEVERE
#logback 설정
#로그파일  DEV/QA/RELEASE
#log.config.mode=DEV
##로그파일 저장 분기 ZIP이면 ZIP파일로 저장 LOG이면 LOG파일로 일자별 저장
##log.config.savemode=ZIP
#log.config.savemode=LOG
##ZIP모드일 경우에만 사용
##로그파일 최소 개수
#log.config.min=1
##로그파일 최대 개수
#log.config.max=10
##로그파일 사이즈
#log.config.filesizezip=10MB
##ZIP모드일 경우에만 사용
##LOG모드일 경우에만 사용
##로그파일 기간설정
#log.config.days=10
##로그파일 사이즈
#log.config.filesizelog=100MB
##로그파일 최대 최대 사이즈
#log.config.totalfilesize=10GB
##LOG모드일 경우에만 사용
##공통 설정
##프로젝트 패키지 명
#log.config.packagename=eblo
##로그파일 경로
#log.config.path=/logs/eblo
##로그파일 이름
#log.config.filename=eblo-dev


##console logging configs
#logging.level.ConsoleHandler.formatter=org.springframework.boot.logging.java.SimpleFormatter
#logging.level.ConsoleHandler.level=ALL

## File Logging config
#logging.pattern.file=org.springframework.boot.logging.java.SimpleFormatter
#logging.file=/Users/sinsanghun/Downloads/logs/logs.log
#logging.file.max-size=100MB
#logging.file.max-history=20






##Datasource configs
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# mariadb 옵션 파라미터 정보는 링크 참조 -> https://mariadb.com/kb/en/library/about-mariadb-connector-j/
## aws rds 
#spring.datasource.url=jdbc:mariadb://[database]/schema?passwordCharacterEncoding=utf-8
## dev rdbms
spring.datasource.url=jdbc:mariadb://[database]/schema?passwordCharacterEncoding=utf-8
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

## aws rds 
#spring.datasource.username=test
#spring.datasource.password=test
## Dev server rdbms
spring.datasource.username=test
spring.datasource.password=test


## sql을 하기 위해서는 initialization-mode=always 로 설정 되어야함 
## 설정 되지 않으면 spring.datasource.schema, spring.datasource.data에 설정된 파일은 실행 되지 않음 
#스키마를 생성 - 생성하지 않도록 처리 always, never
spring.datasource.initialization-mode=always
#지정되는 디비별로 sql 이 다른경우 위와 같이 db를 구분한다.단 파일은 리소스 폴더 루트에 있어야함. schema-${platform}.sql 이런형태로
#spring.datasource.platform=mariadb
spring.datasource.schema=classpath*:sql/schema-mariadb.sql
spring.datasource.data=classpath*:sql/data-mariadb.sql
## sql 파일은 여러개를 설정 할수 있다. 
#spring.datasource.data=classpath*:sql/data-mariadb.sql,classpath*:sql/data-mysql.sql  또는(OR) import_*_users.sql
spring.datasource.sql-script-encoding=UTF-8
#초기 실행시 sql 작업중 에러 발생시 실행 여부 기본값 false(실행안함)
#spring.datasource.continue-on-error=true

##Datasource hikari configs
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000

## Hibernate JPA specific configs
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
spring.jpa.properties.hibernate.default_schema=abtest
spring.jpa.properties.hibernate.search.autoregister_listeners=false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer=falsehikari
#카멜 형식의 변수명을 db 컬럼명 언더스코어로 자동 매핑  
spring.jpa.properties.hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy

## dialect(방언) 설정 값은 링크 참조 https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/dialect/package-summary.html
## Hibernate 에 DB 방언 설정 ( hibernate 기본 제공 ) 
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB102Dialect
## Hibernate 에 기본 제공되는 방언에 fulltext index 검색을 위함 match 함수를 방언 클래스의 function으로 추가.
## 일부 커스텀 한 경우 방언을 상속받은 클래스로 방언을 변경해야함.  
spring.jpa.properties.hibernate.dialect=com.ab.migration.common.MariadbDialectCustom

## Entity 를 읽어 들여서 테이블을 생성할지 여부 기본값 none
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Seoul
## 초기 실행시 진행될 update 쿼리 
spring.jpa.properties.hibernate.hbm2ddl.import_files=classpath*:sql/jpa_update.sql
#JAP에 의한 데이터 베이스 초기화 사용 여부 기본 false(안함)
#spring.jpa.generate-ddl=true
 
